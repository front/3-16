<?php
// $Id: xmlsitemap_menu.module,v 1.1.4.13.2.35 2009/07/03 04:28:35 davereid Exp $

/**
 * Implementation of hook_cron().
 *
 * Process old menu links not found in the {xmlsitemap} table.
 */
function xmlsitemap_menu_cron() {
  if ($menus = xmlsitemap_menu_get_menus()) {
    // Set the global user variable to the anonymous user.
    xmlsitemap_switch_user(0);

    $sql = "SELECT ml.mlid FROM {menu_links} ml LEFT JOIN {xmlsitemap} x ON x.type = 'menu' AND ml.mlid = x.id WHERE (x.id IS NULL OR x.status IS NULL) AND ml.menu_name IN (" . db_placeholders($menus, 'varchar') . ")";
    $query = db_query_range($sql, $menus, 0, xmlsitemap_var('batch_limit'));

    while ($mlid = db_result($query)) {
      $menu_item = xmlsitemap_menu_menu_link_load($mlid);
      $link = xmlsitemap_menu_create_link($menu_item);
      xmlsitemap_save_link($link);
    }

    // Set the global user variable back to the original user.
    xmlsitemap_restore_user();
  }
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_menu_xmlsitemap_links($offset = 0, $limit = 0) {
  $links = array();

  if ($menus = xmlsitemap_menu_get_menus()) {
    // Set the global user variable to the anonymous user.
    xmlsitemap_switch_user(0);

    $sql = "SELECT ml.mlid FROM {menu_links} ml WHERE ml.mlid > %d AND ml.menu_name IN (" . db_placeholders($menus, 'varchar') . ") ORDER BY ml.mlid";
    $args = array_merge(array($offset), $menus);
    $query = ($limit ? db_query_range($sql, $args, 0, $limit) : db_query($sql, $args));

    while ($mlid = db_result($query)) {
      $menu_item = xmlsitemap_menu_menu_link_load($mlid);
      $links[] = xmlsitemap_menu_create_link($menu_item);
    }

    // Set the global user variable back to the original user.
    xmlsitemap_restore_user();
  }

  return $links;
}

/**
 * Implementation of hook_xmlsitemap_links_batch_info().
 */
function xmlsitemap_menu_xmlsitemap_links_batch_info() {
  $menus = xmlsitemap_menu_get_menus();
  return array(
    'max' => $menus ? db_result(db_query("SELECT COUNT(ml.mlid) FROM {menu_links} ml WHERE ml.menu_name IN (" . db_placeholders($menus, 'varchar') . ")", $menus)) : 0,
  );
}

/**
 * Implementation of hook_xmlsitemap_links_clear().
 */
function xmlsitemap_menu_xmlsitemap_links_clear() {
  db_query("DELETE FROM {xmlsitemap} WHERE type = 'menu'");
}

/**
 * Load a menu link and its associated sitemap link data.
 */
function xmlsitemap_menu_menu_link_load($mlid, $switch_user = FALSE) {
  if ($switch_user) {
    xmlsitemap_switch_user(0);
  }
  $menu_item = menu_link_load($mlid);
  if ($switch_user) {
    xmlsitemap_restore_user();
  }
  if ($data = xmlsitemap_load_link(array('type' => 'menu', 'id' => $mlid))) {
    $menu_item['xmlsitemap'] = $data;
  }
  return $menu_item;
}

/**
 * Implementation of hok_form_FORM_ID_alter().
 *
 * Show a summary of menus on the XML sitemap settings page.
 */
function xmlsitemap_menu_form_xmlsitemap_settings_form_alter(&$form, $form_state) {
  $form['menu'] = array(
    '#type' => 'fieldset',
    '#title' => t('Menus'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 40,
    '#access' => user_access('administer menu'),
  );

  $menus = menu_get_menus();
  foreach ($menus as $menu => $name) {
    $menus[$menu] = array(
      'name' => $name,
      'link' => 'admin/build/menu-customize/' . $menu . '/edit',
      'status' => variable_get('xmlsitemap_menu_status_' . $menu, 0),
      'priority' => variable_get('xmlsitemap_menu_priority_' . $menu, 'default'),
    );
  }
  xmlsitemap_settings_list(t('Menu'), $menus, $form['menu']);
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * @see menu_edit_menu()
 */
function xmlsitemap_menu_form_menu_edit_menu_alter(&$form, $form_state) {
  $menu = isset($form['menu_name']['#value']) ? $form['menu_name']['#value'] : '';
  $form['xmlsitemap'] = array(
    '#type' => 'fieldset',
    '#title' => t('XML sitemap'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['xmlsitemap']['xmlsitemap_menu_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include in the sitemap'),
    '#default_value' => variable_get('xmlsitemap_menu_status_' . $menu, 0),
  );
  $form['xmlsitemap']['xmlsitemap_menu_priority'] = array(
    '#type' => 'select',
    '#title' => t('Default priority'),
    '#options' => xmlsitemap_get_priority_options(TRUE),
    '#default_value' => variable_get('xmlsitemap_menu_priority_' . $menu, 'default'),
  );

  // @todo Enable this feature:
  //$form['xmlsitemap']['xmlsitemap_menu_calculate_priority'] = array(
  //  '#type' => 'checkbox',
  //  '#title' => t('Calculate priority based on menu item depth and weight.'),
  //  '#default_value' => variable_get('xmlsitemap_menu_calculate_priority_' . $menu, FALSE),
  //);

  $form['submit'] += array('#weight' => 9);
  if (isset($form['delete'])) {
    $form['delete'] += array('#weight' => 10);
  }

  $form['#submit'][] = 'xmlsitemap_menu_menu_edit_menu_submit';
}

/**
 * Form submit handler; update settings when a menu is saved.
 */
function xmlsitemap_menu_menu_edit_menu_submit($form, $form_state) {
  $menu = $form_state['values']['menu_name'];
  $new_priority = $form_state['values']['xmlsitemap_menu_priority'];
  $new_status = $form_state['values']['xmlsitemap_menu_status'];

  $updates = array();
  if ($new_priority != variable_get('xmlsitemap_menu_priority_' . $menu, 'default')) {
    $updates['priority'] = $new_priority;
  }
  if ($new_status != variable_get('xmlsitemap_menu_status_' . $menu, 0)) {
    $updates['status'] = $new_status;
  }

  if ($updates) {
    xmlsitemap_update_links($updates, array('type' => 'menu', 'menu_name' => $menu));
  }

  variable_set('xmlsitemap_menu_priority_' . $menu, $new_priority);
  variable_set('xmlsitemap_menu_status_' . $menu, $new_status);
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * @see menu_delete_menu_confirm()
 */
function xmlsitemap_menu_form_menu_delete_menu_confirm_alter(&$form, $form_state) {
  $form['#submit'][] = 'xmlsitemap_menu_form_menu_delete_menu_confirm_submit';
}

/**
 * Form submit handler; delete sitemap links when a menu is deleted.
 */
function xmlsitemap_menu_form_menu_delete_menu_confirm_submit($form, $form_state) {
  $menu = $form['#menu']['menu_name'];
  xmlsitemap_delete_link(array('type' => 'menu', 'menu_name' => $menu));
  variable_del('xmlsitemap_menu_status_' . $menu);
  variable_del('xmlsitemap_menu_priority_ ' . $menu);
}

//function xmlsitemap_menu_form_menu_overview_form_alter(&$form, $form_state) {
//  $form['#submit'][] = 'xmlsitemap_menu_menu_overview_form_submit';
//}
//
//function xmlsitemap_menu_menu_overview_form_submit($form, $form_state) {
//  foreach (element_children($form) as $mlid) {
//    if (isset($form[$mlid]['#item'])) {
//      $menu_item = menu_link_load($form[$mlid]['#item']['mlid'], TRUE);
//      xmlsitemap_menu_item_update($menu_item);
//    }
//  }
//}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * @see menu_item_delete_form()
 */
function xmlsitemap_menu_form_menu_item_delete_form_alter(&$form, $form_state) {
  $form['#submit'][] = 'xmlsitemap_menu_menu_item_delete_form_submit';
}

/**
 * Form submit callback; delete the sitemap link when a menu item is deleted.
 */
function xmlsitemap_menu_menu_item_delete_form_submit($form, $form_state) {
  xmlsitemap_menu_item_delete($form['#item']);
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * @see menu_edit_item()
 */
function xmlsitemap_menu_form_menu_edit_item_alter(&$form, $form_state) {
  $form['#submit'][] = 'xmlsitemap_menu_menu_edit_item_submit';
}

/**
 * Form submit callback; update the sitemap link when a menu item is updated.
 */
function xmlsitemap_menu_menu_edit_item_submit($form, $form_state) {
  $menu_item = menu_link_load($form_state['values']['menu']['mlid'], TRUE);
  xmlsitemap_menu_item_update($menu_item);
}

function xmlsitemap_menu_item_update($menu_item) {
  $link = xmlsitemap_menu_create_link($menu_item);
  xmlsitemap_save_link($link);
}

function xmlsitemap_menu_item_delete($menu_item) {
  xmlsitemap_delete_link(array('type' => 'menu', 'id' => $menu_item['mlid']));
}

/**
 * Fetch an array of menus to be included in the sitemap.
 */
function xmlsitemap_menu_get_menus() {
  $menus = array_keys(menu_get_menus());
  foreach ($menus as $index => $menu) {
    if (!variable_get('xmlsitemap_menu_status_' . $menu, 0)) {
      unset($menus[$index]);
    }
  }
  return $menus;
}

/**
 * Create a sitemap link from a menu item.
 *
 * @param $menu_item
 *   A loaded menu item.
 */
function xmlsitemap_menu_create_link($menu_item) {
  if (!isset($menu_item['xmlsitemap'])) {
    $menu_item['xmlsitemap'] = array();
  }

  $menu_item['xmlsitemap'] += array(
    'type' => 'menu',
    'id' => $menu_item['mlid'],
    'loc' => $menu_item['link_path'],
    'priority_override' => xmlsitemap_menu_var('calculate_priority_' . $menu_item['menu_name']) ? xmlsitemap_menu_calculate_priority($menu_item) : NULL,
    'menu_name' => $menu_item['menu_name'],
  );

  // The following values must always be checked because they are volatile.
  $menu_item['xmlsitemap']['access'] = $menu_item['access'] && !$menu_item['external'] && !$menu_item['hidden'];
  $menu_item['xmlsitemap']['status'] = variable_get('xmlsitemap_menu_status_' . $menu_item['menu_name'], 0);
  $menu_item['xmlsitemap']['priority'] = variable_get('xmlsitemap_menu_priority_' . $menu_item['menu_name'], 'default');

  return $menu_item['xmlsitemap'];
}

/**
 * Calculate the priority of a menu link based on depth and weight.
 */
function xmlsitemap_menu_calculate_priority($menu_item) {
  $priority = (MENU_MAX_DEPTH - $menu_item['depth'] + 1) / MENU_MAX_DEPTH;
  $priority -= (50 + $menu_item['weight']) / (100 * (MENU_MAX_DEPTH + 1));
  return $priority;
}

/**
 * Internal default variables for template_var().
 */
function xmlsitemap_menu_variables() {
  $defaults = array(
    // Deprecated variables set to NULL so they are still removed on uninstall.
    'xmlsitemap_menu_menus' => NULL,
    'xmlsitemap_menu_calculate_priority' => NULL,
  );
  $menus = array_keys(menu_get_menus());
  foreach ($menus as $menu) {
    $defaults['xmlsitemap_menu_status_' . $menu] = 0;
    $defaults['xmlsitemap_menu_priority_' . $menu] = 'default';
    $defaults['xmlsitemap_menu_calculate_priority_' . $menu] = FALSE;
  }
  return $defaults;
}

/**
 * Internal implementation of variable_get().
 */
function xmlsitemap_menu_var($name, $default = NULL) {
  static $defaults = NULL;
  if (!isset($defaults)) {
    $defaults = xmlsitemap_menu_variables();
  }

  $name = 'xmlsitemap_menu_' . $name;

  // @todo Remove when stable.
  if (!isset($defaults[$name])) {
    trigger_error(t('Default variable for %variable not found.', array('%variable' => $name)));
  }

  return variable_get($name, isset($default) || !isset($defaults[$name]) ? $default : $defaults[$name]);
}
