<?php
// $Id: xmlsitemap_node.test,v 1.1.2.9 2009/07/03 04:28:33 davereid Exp $

/**
 * @file
 * Unit tests for the xmlsitemap_node module.
 */

class XMLSitemapNodeTestHelper extends XMLSitemapTestHelper {
  protected $admin_user;
  protected $normal_user;
  protected $nodes = array();

  function setUp() {
    parent::setUp('xmlsitemap', 'xmlsitemap_node', 'comment');
    $this->checkFilesDirectory();

    $this->admin_user = $this->drupalCreateUser(array('administer nodes', 'administer content types', 'administer xmlsitemap'));
    //$this->normal_user = $this->drupalCreateUser(array('create page content', 'access content'));
  }

  //function addNodes($count) {
  //  for ($i = count($this->nodes); $i < ($count + 1); $i++) {
  //    $this->nodes[$i] = $this->drupalCreateNode();
  //  }
  //}

  protected function assertNodeInSitemap($node) {
    return $this->assertInSitemap(array('type' => 'node', 'id' => (is_object($node) ? $node->nid : $node)));
  }

  protected function assertNodeNotInSitemap($node) {
    return $this->assertNotInSitemap(array('type' => 'node', 'id' => (is_object($node) ? $node->nid : $node)));
  }

  protected function assertNodeLinkValues($node, array $values) {
    $link = xmlsitemap_load_link(array('type' => 'node', 'id' => $node->nid));
    if (!$link) {
      $this->fail(t('Could not load sitemap link for node @nid.', array('@nid' => $node->nid)));
    }
    else {
      $this->assertLinkValues($link, $values);
    }
  }
}

//class XMLSitemapNodeUnitTest extends DrupalWebTestCase {
//  public static function getInfo() {
//    return array(
//      'name' => 'XML Sitemap node unit tests',
//      'description' => 'Unit tests for the XML Sitemap node module.',
//      'group' => 'XML Sitemap',
//    );
//  }
//
//  function setUp() {
//    parent::setUp('xmlsitemap', 'xmlsitemap_node');
//  }
//}

class XMLSitemapNodeFunctionalTest extends XMLSitemapNodeTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'XML sitemap node functional tests',
      'description' => 'Interface tests for the XML sitemap node module.',
      'group' => 'XML sitemap',
    );
  }

  /**
   * Test that unpublishing a node removes it from the sitemap.
   */
  function testUnpublishedNode() {
    $this->drupalLogin($this->admin_user);

    // Create an unpublished node.
    $node = $this->drupalCreateNode(array('status' => FALSE));
    $this->assertNodeNotInSitemap($node);

    // Publish the node.
    $this->drupalPost('node/' . $node->nid . '/edit', array('status' => TRUE), t('Save'));
    $this->assertNodeInSitemap($node);

    // Unpublish the node again.
    $this->drupalPost('node/' . $node->nid . '/edit', array('status' => FALSE), t('Save'));
    $this->assertNodeNotInSitemap($node);
  }

  /**
   * Test the content type settings.
   */
  function testTypeSettings() {
    $this->drupalLogin($this->admin_user);

    $node_old = $this->drupalCreateNode();
    $this->assertNodeLinkValues($node_old, array('status' => 1, 'priority' => NULL));

    $edit = array(
      'xmlsitemap_node_status' => FALSE,
      'xmlsitemap_node_priority' => '0.0',
    );
    $this->drupalGet('admin/content/node-type/page');
    $this->drupalPost('admin/content/node-type/page', $edit, t('Save content type'));
    $this->assertText(t('The content type Page has been updated.'));

    $node = $this->drupalCreateNode();
    $this->assertNodeLinkValues($node, array('status' => 0, 'priority' => 0.0));
    $this->assertNodeLinkValues($node_old, array('status' => 0, 'priority' => 0.0));

    $edit = array(
      'xmlsitemap_node_status' => TRUE,
      'xmlsitemap_node_priority' => 'default', // Default (NULL) value.
    );
    $this->drupalPost('admin/content/node-type/page', $edit, t('Save content type'));
    $this->assertText(t('The content type Page has been updated.'));

    // Since the status has been set to NULL, check that these are still not visible.
    $this->assertNodeLinkValues($node, array('status' => 1, 'priority' => NULL));
    $this->assertNodeLinkValues($node_old, array('status' => 1, 'priority' => NULL));

    //$this->drupalPost('node/' . $node->nid . '/edit', array(), t('Save'));
    //$this->assertText(t('Page @title has been updated.', array('@title' => $node->title)));
  }

  /**
   * Test the import of old nodes via cron.
   */
  function testCron() {
    $this->drupalLogin($this->admin_user);

    $limit = 5;
    $this->drupalPost('admin/settings/xmlsitemap', array('xmlsitemap_batch_limit' => $limit), t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'));

    $nodes = array();
    for ($i = 1; $i <= ($limit + 1); $i++) {
      $node = $this->drupalCreateNode();
      array_push($nodes, $node);
      // Create a link with the same ID but different type.
      $this->addSitemapLink(array('id' => $node->nid));
      // Need to delay by one second so the nodes don't all have the same
      // timestamp.
      sleep(1);
    }

    // Clear all the node link data so we can emulate 'old' nodes.
    xmlsitemap_node_xmlsitemap_links_clear();
    foreach ($nodes as $node) {
      $this->assertNodeNotInSitemap($node);
    }

    // Run cron to import old nodes.
    drupal_cron_run();

    for ($i = 1; $i <= ($limit + 1); $i++) {
      $node = array_pop($nodes);
      if ($i <= $limit) {
        // The first $limit nodes should be inserted.
        $this->assertNodeLinkValues($node, array('status' => 1, 'lastmod' => $node->changed));
      }
      else {
        // Any beyond $limit should not be in the sitemap.
        $this->assertNodeNotInSitemap($node);
      }
    }
  }

  //function testMassOperations() {
  //  $this->drupalLogin($this->admin_user);
  //  $this->addNodes(2);
  //
  //  $edit = array(
  //    'operation' => 'xmlsitemap_exclude',
  //    'nodes[1]' => 1,
  //    'nodes[2]' => 2,
  //  );
  //  $this->drupalPost('admin/content/node', $edit, t('Update'));
  //
  //  for ($i = 0; $i < 2; $i++) {
  //    $this->assertNodeNotInSitemap($this->nodes[$i]->nid);
  //  }
  //
  //  $edit = array(
  //    'operation' => 'xmlsitemap_include',
  //    'nodes[1]' => 1,
  //    'nodes[2]' => 2,
  //  );
  //  $this->drupalPost('admin/content/node', $edit, t('Update'));
  //
  //  for ($i = 0; $i < 2; $i++) {
  //    $this->assertNodeInSitemap($this->nodes[$i]->nid);
  //  }
  //}
}
